version: "3"

networks:
  near-sffl:
    name: near-sffl
    driver: bridge

services:
  rmq:
    image: rabbitmq:latest
    container_name: rmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - near-sffl

  mainnet-anvil:
    image: ghcr.io/foundry-rs/foundry
    container_name: mainnet-anvil
    ports:
      - "8545:8545"
    entrypoint: anvil
    volumes:
      - ./tests/anvil/data/avs-and-eigenlayer-deployed-anvil-state.json:/root/.anvil/state.json
    command: --host 0.0.0.0 --port 8545 --chain-id 1 --block-time 1 --load-state /root/.anvil/state.json
    networks:
      - near-sffl
  
  rollup0-anvil:
    image: ghcr.io/foundry-rs/foundry
    container_name: rollup0-anvil
    ports:
      - "8546:8546"
    entrypoint: anvil
    command: --host 0.0.0.0 --port 8546 --chain-id 2 --block-time 1 
    networks:
      - near-sffl

  rollup1-anvil:
    image: ghcr.io/foundry-rs/foundry
    container_name: rollup1-anvil
    ports:
      - "8547:8547"
    entrypoint: anvil
    command: --host 0.0.0.0 --port 8547 --chain-id 3 --block-time 1 
    networks:
      - near-sffl

  indexer:
    image: near-sffl-indexer:latest
    container_name: near-sffl-indexer
    depends_on:
      rmq:
        condition: service_healthy
      mainnet-anvil:
        condition: service_started
      rollup0-anvil:
        condition: service_started
      rollup1-anvil:
        condition: service_started
    command: 
      - --rmq-address
      - amqp://rmq:5672
      - --da-contract-ids
      - da2.test.near
      - --da-contract-ids
      - da3.test.near
      - --rollup-ids
      - "2"
      - --rollup-ids
      - "3"
    networks:
      - near-sffl

  aggregator:
    image: ko.local/aggregator/cmd/main.go:latest
    container_name: near-sffl-aggregator
    depends_on:
      mainnet-anvil:
        condition: service_started
      rollup0-anvil:
        condition: service_started
      rollup1-anvil:
        condition: service_started
    volumes:
      - ./:/near-sffl/
    working_dir: /near-sffl
    command: 
      - --config 
      - config-files/aggregator-docker-compose.yaml
      - --sffl-deployment 
      - contracts/evm/script/output/31337/sffl_avs_deployment_output.json
      - --ecdsa-private-key 
      - "0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6"
    networks:
      - near-sffl

  operator0:
    image: ko.local/operator/cmd/main.go:latest
    container_name: near-sffl-operator0
    depends_on:
      rmq:
        condition: service_healthy
      mainnet-anvil:
        condition: service_started
      rollup0-anvil:
        condition: service_started
      rollup1-anvil:
        condition: service_started
      aggregator:
        condition: service_started
    ports:
      - "9090:9090" # prometheus metrics port (defined in operator-docker-compose.anvil.yaml file)
    volumes:
      - ./:/near-sffl/
    working_dir: /near-sffl
    environment:
      - OPERATOR_BLS_KEY_PASSWORD=
      - OPERATOR_ECDSA_KEY_PASSWORD=
    command: --config config-files/operator-docker-compose.anvil.yaml
    networks:
      - near-sffl

  # operator2:
  #   image: ghcr.io/layr-labs/incredible-squaring/operator/cmd/main.go:latest
  #   container_name: incredible-squaring-operator2
  #   depends_on:
  #     anvil:
  #       condition: service_started
  #   volumes:
  #     - ./:/incredible-squaring/
  #   working_dir: /incredible-squaring
  #   command: --config config-files/operator-docker-compose.anvil.yaml --credible-squaring-deployment contracts/script/output/31337/credible_squaring_avs_deployment_output.json --ecdsa-private-key 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d --bls-private-key 2
  #   networks:
  #     - near-sffl

  # METRICS RELATED
  grafana:
    image: grafana/grafana:9.4.1
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      # See https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
      # and https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/
      # They recommend using env vars instead of overwriting config.ini
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - near-sffl

  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - --web.enable-remote-write-receiver
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - near-sffl
    # so that we can access the host from within the container
    # needed to get the metrics from host.docker.internal:9184/metrics
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  prometheus_data: {}
  grafana_data: {}
