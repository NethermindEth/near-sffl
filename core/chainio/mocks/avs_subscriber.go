// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/near-sffl/core/chainio (interfaces: AvsSubscriberer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/avs_subscriber.go -package=mocks github.com/NethermindEth/near-sffl/core/chainio AvsSubscriberer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	contractSFFLOperatorSetUpdateRegistry "github.com/NethermindEth/near-sffl/contracts/bindings/SFFLOperatorSetUpdateRegistry"
	contractSFFLTaskManager "github.com/NethermindEth/near-sffl/contracts/bindings/SFFLTaskManager"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "go.uber.org/mock/gomock"
)

// MockAvsSubscriberer is a mock of AvsSubscriberer interface.
type MockAvsSubscriberer struct {
	ctrl     *gomock.Controller
	recorder *MockAvsSubscribererMockRecorder
}

// MockAvsSubscribererMockRecorder is the mock recorder for MockAvsSubscriberer.
type MockAvsSubscribererMockRecorder struct {
	mock *MockAvsSubscriberer
}

// NewMockAvsSubscriberer creates a new mock instance.
func NewMockAvsSubscriberer(ctrl *gomock.Controller) *MockAvsSubscriberer {
	mock := &MockAvsSubscriberer{ctrl: ctrl}
	mock.recorder = &MockAvsSubscribererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsSubscriberer) EXPECT() *MockAvsSubscribererMockRecorder {
	return m.recorder
}

// ParseCheckpointTaskResponded mocks base method.
func (m *MockAvsSubscriberer) ParseCheckpointTaskResponded(arg0 types.Log) (*contractSFFLTaskManager.ContractSFFLTaskManagerCheckpointTaskResponded, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCheckpointTaskResponded", arg0)
	ret0, _ := ret[0].(*contractSFFLTaskManager.ContractSFFLTaskManagerCheckpointTaskResponded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCheckpointTaskResponded indicates an expected call of ParseCheckpointTaskResponded.
func (mr *MockAvsSubscribererMockRecorder) ParseCheckpointTaskResponded(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCheckpointTaskResponded", reflect.TypeOf((*MockAvsSubscriberer)(nil).ParseCheckpointTaskResponded), arg0)
}

// SubscribeToNewTasks mocks base method.
func (m *MockAvsSubscriberer) SubscribeToNewTasks(arg0 chan *contractSFFLTaskManager.ContractSFFLTaskManagerCheckpointTaskCreated) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToNewTasks", arg0)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToNewTasks indicates an expected call of SubscribeToNewTasks.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToNewTasks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNewTasks", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToNewTasks), arg0)
}

// SubscribeToOperatorSetUpdates mocks base method.
func (m *MockAvsSubscriberer) SubscribeToOperatorSetUpdates(arg0 chan *contractSFFLOperatorSetUpdateRegistry.ContractSFFLOperatorSetUpdateRegistryOperatorSetUpdatedAtBlock) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToOperatorSetUpdates", arg0)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToOperatorSetUpdates indicates an expected call of SubscribeToOperatorSetUpdates.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToOperatorSetUpdates(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToOperatorSetUpdates", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToOperatorSetUpdates), arg0)
}

// SubscribeToTaskResponses mocks base method.
func (m *MockAvsSubscriberer) SubscribeToTaskResponses(arg0 chan *contractSFFLTaskManager.ContractSFFLTaskManagerCheckpointTaskResponded) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTaskResponses", arg0)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTaskResponses indicates an expected call of SubscribeToTaskResponses.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToTaskResponses(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTaskResponses", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToTaskResponses), arg0)
}
