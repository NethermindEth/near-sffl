// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/near-sffl/aggregator (interfaces: MessageDatabaser)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/message_database.go -package=mocks github.com/NethermindEth/near-sffl/aggregator MessageDatabaser
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/NethermindEth/near-sffl/aggregator/types"
	contractSFFLRegistryRollup "github.com/NethermindEth/near-sffl/contracts/bindings/SFFLRegistryRollup"
	contractSFFLServiceManager "github.com/NethermindEth/near-sffl/contracts/bindings/SFFLServiceManager"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageDatabaser is a mock of MessageDatabaser interface.
type MockMessageDatabaser struct {
	ctrl     *gomock.Controller
	recorder *MockMessageDatabaserMockRecorder
}

// MockMessageDatabaserMockRecorder is the mock recorder for MockMessageDatabaser.
type MockMessageDatabaserMockRecorder struct {
	mock *MockMessageDatabaser
}

// NewMockMessageDatabaser creates a new mock instance.
func NewMockMessageDatabaser(ctrl *gomock.Controller) *MockMessageDatabaser {
	mock := &MockMessageDatabaser{ctrl: ctrl}
	mock.recorder = &MockMessageDatabaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageDatabaser) EXPECT() *MockMessageDatabaserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageDatabaser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageDatabaserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageDatabaser)(nil).Close))
}

// Fetch mocks base method.
func (m *MockMessageDatabaser) Fetch(arg0, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockMessageDatabaserMockRecorder) Fetch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMessageDatabaser)(nil).Fetch), arg0, arg1, arg2)
}

// FetchOperatorSetUpdate mocks base method.
func (m *MockMessageDatabaser) FetchOperatorSetUpdate(arg0 uint64, arg1 *contractSFFLRegistryRollup.OperatorSetUpdateMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOperatorSetUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchOperatorSetUpdate indicates an expected call of FetchOperatorSetUpdate.
func (mr *MockMessageDatabaserMockRecorder) FetchOperatorSetUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOperatorSetUpdate", reflect.TypeOf((*MockMessageDatabaser)(nil).FetchOperatorSetUpdate), arg0, arg1)
}

// FetchOperatorSetUpdateAggregation mocks base method.
func (m *MockMessageDatabaser) FetchOperatorSetUpdateAggregation(arg0 uint64, arg1 *types.MessageBlsAggregationServiceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOperatorSetUpdateAggregation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchOperatorSetUpdateAggregation indicates an expected call of FetchOperatorSetUpdateAggregation.
func (mr *MockMessageDatabaserMockRecorder) FetchOperatorSetUpdateAggregation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOperatorSetUpdateAggregation", reflect.TypeOf((*MockMessageDatabaser)(nil).FetchOperatorSetUpdateAggregation), arg0, arg1)
}

// FetchStateRootUpdate mocks base method.
func (m *MockMessageDatabaser) FetchStateRootUpdate(arg0 uint32, arg1 uint64, arg2 *contractSFFLServiceManager.StateRootUpdateMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStateRootUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchStateRootUpdate indicates an expected call of FetchStateRootUpdate.
func (mr *MockMessageDatabaserMockRecorder) FetchStateRootUpdate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStateRootUpdate", reflect.TypeOf((*MockMessageDatabaser)(nil).FetchStateRootUpdate), arg0, arg1, arg2)
}

// FetchStateRootUpdateAggregation mocks base method.
func (m *MockMessageDatabaser) FetchStateRootUpdateAggregation(arg0 uint32, arg1 uint64, arg2 *types.MessageBlsAggregationServiceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStateRootUpdateAggregation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchStateRootUpdateAggregation indicates an expected call of FetchStateRootUpdateAggregation.
func (mr *MockMessageDatabaserMockRecorder) FetchStateRootUpdateAggregation(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStateRootUpdateAggregation", reflect.TypeOf((*MockMessageDatabaser)(nil).FetchStateRootUpdateAggregation), arg0, arg1, arg2)
}

// Store mocks base method.
func (m *MockMessageDatabaser) Store(arg0, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMessageDatabaserMockRecorder) Store(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMessageDatabaser)(nil).Store), arg0, arg1, arg2)
}

// StoreOperatorSetUpdate mocks base method.
func (m *MockMessageDatabaser) StoreOperatorSetUpdate(arg0 contractSFFLRegistryRollup.OperatorSetUpdateMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOperatorSetUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOperatorSetUpdate indicates an expected call of StoreOperatorSetUpdate.
func (mr *MockMessageDatabaserMockRecorder) StoreOperatorSetUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOperatorSetUpdate", reflect.TypeOf((*MockMessageDatabaser)(nil).StoreOperatorSetUpdate), arg0)
}

// StoreOperatorSetUpdateAggregation mocks base method.
func (m *MockMessageDatabaser) StoreOperatorSetUpdateAggregation(arg0 contractSFFLRegistryRollup.OperatorSetUpdateMessage, arg1 types.MessageBlsAggregationServiceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOperatorSetUpdateAggregation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOperatorSetUpdateAggregation indicates an expected call of StoreOperatorSetUpdateAggregation.
func (mr *MockMessageDatabaserMockRecorder) StoreOperatorSetUpdateAggregation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOperatorSetUpdateAggregation", reflect.TypeOf((*MockMessageDatabaser)(nil).StoreOperatorSetUpdateAggregation), arg0, arg1)
}

// StoreStateRootUpdate mocks base method.
func (m *MockMessageDatabaser) StoreStateRootUpdate(arg0 contractSFFLServiceManager.StateRootUpdateMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreStateRootUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreStateRootUpdate indicates an expected call of StoreStateRootUpdate.
func (mr *MockMessageDatabaserMockRecorder) StoreStateRootUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreStateRootUpdate", reflect.TypeOf((*MockMessageDatabaser)(nil).StoreStateRootUpdate), arg0)
}

// StoreStateRootUpdateAggregation mocks base method.
func (m *MockMessageDatabaser) StoreStateRootUpdateAggregation(arg0 contractSFFLServiceManager.StateRootUpdateMessage, arg1 types.MessageBlsAggregationServiceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreStateRootUpdateAggregation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreStateRootUpdateAggregation indicates an expected call of StoreStateRootUpdateAggregation.
func (mr *MockMessageDatabaserMockRecorder) StoreStateRootUpdateAggregation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreStateRootUpdateAggregation", reflect.TypeOf((*MockMessageDatabaser)(nil).StoreStateRootUpdateAggregation), arg0, arg1)
}
