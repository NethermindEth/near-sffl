"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[878],{7940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=n(4848),i=n(8453);const a={sidebar_position:5},o="Faults",r={id:"design/faults",title:"Faults",description:"Please refer to Overview for an introduction.",source:"@site/docs/design/faults.md",sourceDirName:"design",slug:"/design/faults",permalink:"/design/faults",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar",previous:{title:"Operator Set Tracking",permalink:"/design/operator_set_tracking"},next:{title:"Incentives",permalink:"/design/incentives"}},l={},c=[{value:"Safety Faults",id:"safety-faults",level:2},{value:"Liveness Faults",id:"liveness-faults",level:2}];function d(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"faults",children:"Faults"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Please refer to ",(0,s.jsx)(t.a,{href:"/design/overview",children:"Overview"})," for an introduction."]})}),"\n",(0,s.jsxs)(t.p,{children:["There are two main AVS faults: ",(0,s.jsx)(t.em,{children:"Safety Faults"})," and ",(0,s.jsx)(t.em,{children:"Liveness Faults"}),". None are\nimplemented yet."]}),"\n",(0,s.jsx)(t.h2,{id:"safety-faults",children:"Safety Faults"}),"\n",(0,s.jsxs)(t.p,{children:["Safety faults affect the integrity of the network, leading to incorrect states\nor outcomes that are not consistent with the system's rules. An AVS operator\ncan violate the network rules by two means - ",(0,s.jsx)(t.em,{children:"Double Signing"})," and\n",(0,s.jsx)(t.em,{children:"Invalid Message"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Equivocation: the operator signed more than one message for the same case -\ne.g. in terms of state root updates, more than one state root for the same\nnetwork and block or more than one timestamp for the same block."}),"\n",(0,s.jsx)(t.li,{children:"Invalid Message: a message that is provably wrong - for operator set updates,\nif the update ID does not match the delta based on the contracts, it's simply\nwrong. The same applies to state root updates, but through state root\nverifications."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"liveness-faults",children:"Liveness Faults"}),"\n",(0,s.jsx)(t.p,{children:"Liveness faults affect the availability and efficiency of the network, leading\nto delays or inability to perform transactions but not necessarily resulting\nin incorrect states."}),"\n",(0,s.jsx)(t.p,{children:"This is closely tied to the messaging flow. If an operator consistently\nabstains from participating in message signings, this can impact the network\navailability and attestation verification costs."}),"\n",(0,s.jsx)(t.h1,{id:"slashing",children:"Slashing"}),"\n",(0,s.jsx)(t.p,{children:"Slashing parameters and specifics are still to be determined."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);