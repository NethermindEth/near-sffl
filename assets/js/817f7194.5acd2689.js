"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[574],{7227:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var s=i(4848),l=i(8453);const t={sidebar_position:2},r="Milestones",a={id:"milestones",title:"Milestones",description:"Here are the milestones for future phases. Those are rough estimates of the",source:"@site/docs/milestones.md",sourceDirName:".",slug:"/milestones",permalink:"/milestones",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Incentives",permalink:"/design/incentives"}},o={},d=[{value:"#1: Initial Design",id:"1-initial-design",level:2},{value:"#2: Smart Contracts and Indexer",id:"2-smart-contracts-and-indexer",level:2},{value:"#3: Node Development",id:"3-node-development",level:2},{value:"#4: Slashing",id:"4-slashing",level:2},{value:"#5: Operator Set Handling",id:"5-operator-set-handling",level:2},{value:"#6: Network Management",id:"6-network-management",level:2},{value:"#7: Incentives",id:"7-incentives",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"milestones",children:"Milestones"}),"\n",(0,s.jsx)(n.p,{children:"Here are the milestones for future phases. Those are rough estimates of the\nwork ahead and can be changed depending on the progress."}),"\n",(0,s.jsxs)(n.p,{children:["We have already reached ",(0,s.jsx)(n.a,{href:"#3-node-development",children:"Milestone 3"}),"!"]}),"\n",(0,s.jsx)(n.h2,{id:"1-initial-design",children:"#1: Initial Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Overall network design."}),"\n",(0,s.jsx)(n.li,{children:"Cross-network messaging mechanism."}),"\n",(0,s.jsx)(n.li,{children:"Smart contract architecture."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-smart-contracts-and-indexer",children:"#2: Smart Contracts and Indexer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ethereum smart contracts implementation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"AVS Middleware."}),"\n",(0,s.jsx)(n.li,{children:"Operator set update tracking."}),"\n",(0,s.jsx)(n.li,{children:"Attestation BLS verification."}),"\n",(0,s.jsx)(n.li,{children:"Storage slot proofs."}),"\n",(0,s.jsx)(n.li,{children:"Unit testing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Rollup smart contracts implementation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Operator set copy and updates."}),"\n",(0,s.jsx)(n.li,{children:"Attestation BLS verification."}),"\n",(0,s.jsx)(n.li,{children:"Storage slot MPT proof verification."}),"\n",(0,s.jsx)(n.li,{children:"Unit testing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["NEAR DA indexer.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Running NEAR node."}),"\n",(0,s.jsx)(n.li,{children:"Parsing NEAR DA submissions."}),"\n",(0,s.jsx)(n.li,{children:"Managing MQ messaging for consumer integration."}),"\n",(0,s.jsx)(n.li,{children:"Unit testing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-node-development",children:"#3: Node Development"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement AVS node.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indexer MQ consuming."}),"\n",(0,s.jsx)(n.li,{children:"Rollup full node communication."}),"\n",(0,s.jsx)(n.li,{children:"State root update message tracking and signing."}),"\n",(0,s.jsx)(n.li,{children:"Operator set update message tracking and signing."}),"\n",(0,s.jsx)(n.li,{children:"Checkpoint task initial handling (no-op)."}),"\n",(0,s.jsx)(n.li,{children:"Unit testing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement aggregator node.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Message aggregation."}),"\n",(0,s.jsx)(n.li,{children:"Checkpoint task requesting."}),"\n",(0,s.jsx)(n.li,{children:"Attestation storage and serving through an API."}),"\n",(0,s.jsx)(n.li,{children:"Pushing operator set updates to rollups."}),"\n",(0,s.jsx)(n.li,{children:"Unit testing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Set up testing environment.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integration test."}),"\n",(0,s.jsx)(n.li,{children:"E2E test."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-slashing",children:"#4: Slashing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set up checkpoint tasks.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Determine time ranges."}),"\n",(0,s.jsx)(n.li,{children:"Improve Aggregator API for fetching messages in a time range."}),"\n",(0,s.jsx)(n.li,{children:"Design and implement Operator message storage and merkleization."}),"\n",(0,s.jsx)(n.li,{children:"Design and implement Aggregator message storage and merkleization."}),"\n",(0,s.jsx)(n.li,{children:"Checkpoint SMT proof verification."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Investigate challenge mechanisms for each network.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Re-evaluate design if necessary."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Implement state root update challenge for 2 networks."}),"\n",(0,s.jsxs)(n.li,{children:["Implement challenger client.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement off-chain messaging indexing."}),"\n",(0,s.jsx)(n.li,{children:"Implement on-chain messaging indexing."}),"\n",(0,s.jsx)(n.li,{children:"Include SMT and proof generation."}),"\n",(0,s.jsx)(n.li,{children:"Implement challenge sumbmission."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement slashing (only applies if slashing is implemented in EL core).","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Determine slashing parameters."}),"\n",(0,s.jsx)(n.li,{children:"Determine slashing process for each fault."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Explore other possible pitfalls."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-operator-set-handling",children:"#5: Operator Set Handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement operator set entry/exit queue.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Discussions with EigenLayer."}),"\n",(0,s.jsx)(n.li,{children:"AVS middleware."}),"\n",(0,s.jsx)(n.li,{children:"Previous operator set storage on rollups."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Consider moving to ECDSA signatures."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-network-management",children:"#6: Network Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Design and implement dynamic network set changes."}),"\n",(0,s.jsxs)(n.li,{children:["Investigate heterogenous network support.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If viable, implement heterogenous network support."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Add support for other DA layers, such as ",(0,s.jsx)(n.a,{href:"https://eigenda.xyz/",children:"EigenDA"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"7-incentives",children:"#7: Incentives"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Design and implement mechanism for incentivizing operator set updates."}),"\n",(0,s.jsx)(n.li,{children:"Design and implement payment system for message attestations."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To be continued!"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const l={},t=s.createContext(l);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);